import { PictureOptions } from '../Camera.types';
import { CameraType, CapturedPicture, CaptureOptions, BarCodeSettings, ImageType } from './CameraModule.types';
export { ImageType, CameraType, CaptureOptions };
declare type OnCameraReadyListener = () => void;
declare type OnMountErrorListener = ({ nativeEvent: Error }: {
    nativeEvent: any;
}) => void;
declare class CameraModule {
    videoElement: HTMLVideoElement;
    canvas?: HTMLCanvasElement;
    stream: MediaStream | null;
    settings: MediaTrackSettings | null;
    drawBarcodeOptions: any;
    onCameraReady: OnCameraReadyListener;
    onMountError: OnMountErrorListener;
    private _pictureSize?;
    private _isStartingCamera;
    private _autoFocus;
    private _flashMode;
    private _whiteBalance;
    private _cameraType;
    private _zoom;
    private webWorker?;
    private barcodeLoop?;
    readonly autoFocus: string;
    setAutoFocusAsync(value: string): Promise<void>;
    readonly flashMode: string;
    setFlashModeAsync(value: string): Promise<void>;
    readonly whiteBalance: string;
    setWhiteBalanceAsync(value: string): Promise<void>;
    readonly type: CameraType;
    setTypeAsync(value: CameraType): Promise<void>;
    readonly zoom: number;
    setZoomAsync(value: number): Promise<void>;
    constructor(videoElement: HTMLVideoElement);
    setPictureSize(value: string): void;
    onCapabilitiesReady(track: MediaStreamTrack): Promise<void>;
    private _syncTrackCapabilities;
    setVideoSource(stream: MediaStream | MediaSource | Blob | null): void;
    setSettings(stream: MediaStream | null): void;
    setStream(stream: MediaStream | null): void;
    private isImageMirrored;
    getActualCameraType(): CameraType | null;
    ensureCameraIsRunningAsync(): Promise<void>;
    resumePreview(): Promise<MediaStream | null>;
    startScanner(settings: BarCodeSettings, callback: (results: any) => void): void;
    stopScanner(): void;
    private scanForBarcodes;
    private invokeWorker;
    takePicture(config: PictureOptions): CapturedPicture;
    pausePreview(): void;
    getAvailablePictureSizes: (ratio: string) => Promise<string[]>;
    unmount(): void;
}
export default CameraModule;
